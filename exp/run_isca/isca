#!/usr/bin/env python

"""A simple run script.

This script takes files from the input directory and uses these to configure and
run the experiment.

Without specifying any command line options, the following files are essential to running:
* `input/input.nml`   - the namelist
* `input/diag_table`  - the diagnostic output required
"""

import os
import sys
import glob
import argparse

from isca import Experiment, IscaCodeBase, log, GFDL_BASE
from isca.diagtable import DiagTable
import f90nml

parser = argparse.ArgumentParser(description='Run an Isca experiment')
parser.add_argument('name', type=str, help='The name of the experiment.  Output data will be stored in $GFDL_DATA/<name>/run001')
parser.add_argument('-l', '--namelist', metavar='nml', type=str, help='The input namelist.  default: input/input.nml', default='input/input.nml')
parser.add_argument('-d', '--diag', metavar='diag', type=str, help='The diagnostics table. default: input/diag_table', default='input/diag_table')
parser.add_argument('-r', '--restart', metavar='restart', type=str, help='A restart zip file for setting initial state.  If no restart is provided, experiment starts from the intial state prescribed in the namelist.', default=None)
parser.add_argument('-n', '--num_cores', metavar='N', type=int, help='Number of cores to distribute the MPI process over. default: 16', default=16)
parser.add_argument('-c', '--compile', action='store_true', help='Recompile the codebase before running the experiment.')
# TODO add arguments for setting the specific commit id
args = parser.parse_args()

wdir = sys.path[0]  # get the directory of the script as per https://docs.python.org/3/library/sys.html#sys.path

namelist = f90nml.read(args.namelist)
diag_table = DiagTable.from_file(args.diag)

cb = IscaCodeBase.from_directory(GFDL_BASE)
if args.compile:
    cb.compile()

exp = Experiment(args.name, codebase=cb)

exp.namelist = namelist
exp.diag_table = diag_table
exp.inputfiles = [os.path.join('input', f)
                    for f in os.listdir('input')]
                    #if f not in essential_files]

restart = args.restart
if restart is None:
    exp.run(1, use_restart=False, num_cores=args.num_cores)
else:
    exp.run(1, restart_file=restart, num_cores=args.num_cores)